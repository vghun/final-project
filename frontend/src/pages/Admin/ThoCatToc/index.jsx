import React, { useEffect, useState } from "react";
import classNames from "classnames/bind";
import styles from "./ThoCatToc.module.scss";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faStar,
  faPenToSquare,
  faTrash,
  faPlus,
  faLock,
  faLockOpen,
  faMapMarkerAlt,
  faExchangeAlt,
} from "@fortawesome/free-solid-svg-icons";
import { BarberAPI } from "~/apis/barberAPI";
import { BranchAPI } from "~/apis/branchAPI";

const cx = classNames.bind(styles);

function ThoCatToc() {
  const [barbers, setBarbers] = useState([]);
  const [branches, setBranches] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [showChangeBranch, setShowChangeBranch] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [unavailabilities, setUnavailabilities] = useState({});
  const [editData, setEditData] = useState({
    fullName: "",
    phoneNumber: "",
    email: "",
    password: "",
    idBranch: "",
    profileDescription: "",
  });

  const [showLeaveModal, setShowLeaveModal] = useState(false);
  const [leaveData, setLeaveData] = useState({
    idBarber: "",
    startDate: "",
    endDate: "",
    reason: "",
  });

  const openLeaveModal = (barber) => {
    setLeaveData({
      idBarber: barber.idBarber,
      startDate: "",
      endDate: "",
      reason: "",
    });
    setShowLeaveModal(true);
  };

  const handleLeaveSubmit = async (e) => {
    e.preventDefault();
    try {
      await BarberAPI.addUnavailability(leaveData);
      alert("‚úÖ ƒê√£ th√™m l·ªãch ngh·ªâ ph√©p cho th·ª£!");
      setShowLeaveModal(false);
    } catch (error) {
      console.error("L·ªói khi th√™m ngh·ªâ ph√©p:", error);
      alert(error?.response?.data?.message || "‚ùå Kh√¥ng th·ªÉ th√™m l·ªãch ngh·ªâ!");
    }
  };

  const [formData, setFormData] = useState({
    email: "",
    password: "",
    fullName: "",
    phoneNumber: "",
    idBranch: "",
    profileDescription: "",
  });

  const [selectedBarber, setSelectedBarber] = useState(null);
  const [newBranchId, setNewBranchId] = useState("");

  // üîπ L·∫•y danh s√°ch
  const fetchBarbers = async () => {
    try {
      const data = await BarberAPI.getAll();
      setBarbers(data || []);
      await fetchBarberUnavailabilities(data || []);
    } catch (error) {
      console.error("L·ªói khi t·∫£i danh s√°ch barber:", error);
    } finally {
      setLoading(false);
    }
  };

  const fetchBarberUnavailabilities = async (barbersList) => {
    try {
      const dataMap = {};
      for (const barber of barbersList) {
        const res = await BarberAPI.getUnavailabilitiesByBarber(
          barber.idBarber
        );
        dataMap[barber.idBarber] = res?.unavailabilities || [];
      }
      setUnavailabilities(dataMap);
    } catch (error) {
      console.error("L·ªói khi t·∫£i l·ªãch ngh·ªâ:", error);
    }
  };

  const fetchBranches = async () => {
    try {
      const data = await BranchAPI.getAll();
      setBranches(data || []);
    } catch (error) {
      console.error("L·ªói khi t·∫£i danh s√°ch chi nh√°nh:", error);
    }
  };

  useEffect(() => {
    fetchBarbers();
    fetchBranches();
  }, []);

  // üîπ Kh√≥a / m·ªü kh√≥a
  const handleToggleLock = async (barber) => {
    try {
      if (barber.isLocked) {
        await BarberAPI.unlock(barber.idBarber);
        alert(`üîì ƒê√£ m·ªü kh√≥a th·ª£: ${barber.fullName}`);
      } else {
        await BarberAPI.lock(barber.idBarber);
        alert(`üîí ƒê√£ kh√≥a th·ª£: ${barber.fullName}`);
      }
      await fetchBarbers();
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i kh√≥a:", error);
      alert("‚ùå L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i th·ª£!");
    }
  };

  // üîπ M·ªü modal th√™m th·ª£
  const openAddModal = () => {
    setFormData({
      email: "",
      password: "",
      fullName: "",
      phoneNumber: "",
      idBranch: "",
      profileDescription: "",
    });
    setShowModal(true);
  };

  const openEditModal = async (barber) => {
    setSelectedBarber(barber);
    try {
      // üîπ G·ªçi API l·∫•y th√¥ng tin chi ti·∫øt th·ª£
      const detail = await BarberAPI.getProfile(barber.idBarber);

      setEditData({
        fullName: detail.fullName || "",
        phoneNumber: detail.phoneNumber || "",
        email: detail.email || "",
        password: "",
        idBranch: detail.idBranch || "",
        profileDescription: detail.profileDescription?.trim() || "",
      });

      setShowEditModal(true);
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i chi ti·∫øt th·ª£:", error);
      alert("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin th·ª£ ƒë·ªÉ ch·ªânh s·ª≠a!");
    }
  };

  const handleEditSubmit = async (e) => {
    e.preventDefault();
    try {
      await BarberAPI.updateBarber(selectedBarber.idBarber, editData);
      alert("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th·ª£ th√†nh c√¥ng!");
      setShowEditModal(false);
      await fetchBarbers();
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t:", error);
      alert(error?.response?.data?.message || "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th·ª£!");
    }
  };
  const handleDelete = async (barber) => {
    if (!window.confirm(`‚ö†Ô∏è X√°c nh·∫≠n x√≥a th·ª£ ${barber.fullName}?`)) return;
    try {
      await BarberAPI.deleteBarber(barber.idBarber);
      alert("üóëÔ∏è ƒê√£ x√≥a th·ª£ th√†nh c√¥ng!");
      await fetchBarbers();
    } catch (error) {
      console.error("L·ªói khi x√≥a:", error);
      alert(error?.response?.data?.message || "‚ùå Kh√¥ng th·ªÉ x√≥a th·ª£!");
    }
  };

  // üîπ X·ª≠ l√Ω nh·∫≠p form
  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  // üîπ Th√™m th·ª£ m·ªõi
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await BarberAPI.createBarber(formData);
      alert("‚úÖ T·∫°o th·ª£ c·∫Øt t√≥c th√†nh c√¥ng!");
      setShowModal(false);
      await fetchBarbers();
    } catch (error) {
      console.error("L·ªói khi t·∫°o th·ª£:", error);
      alert(error?.response?.data?.message || "‚ùå Kh√¥ng th·ªÉ t·∫°o th·ª£ m·ªõi!");
    }
  };

  // üîπ ƒê·ªïi chi nh√°nh
  const openChangeBranchModal = (barber) => {
    setSelectedBarber(barber);
    setNewBranchId("");
    setShowChangeBranch(true);
  };

  const handleChangeBranch = async (e) => {
    e.preventDefault();
    if (!selectedBarber || !newBranchId) {
      alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn chi nh√°nh m·ªõi!");
      return;
    }
    try {
      await BarberAPI.assignBranch({
        idBarber: selectedBarber.idBarber,
        idBranch: newBranchId,
      });
      alert(`‚úÖ ƒê√£ chuy·ªÉn ${selectedBarber.fullName} sang chi nh√°nh m·ªõi!`);
      setShowChangeBranch(false);
      await fetchBarbers();
    } catch (error) {
      console.error("L·ªói khi ƒë·ªïi chi nh√°nh:", error);
      alert("‚ùå Kh√¥ng th·ªÉ ƒë·ªïi chi nh√°nh!");
    }
  };

  const getLeaveText = (idBarber) => {
    const leaves = unavailabilities[idBarber];
    if (!leaves || leaves.length === 0) return "Kh√¥ng c√≥";
    return leaves
      .map((l) => `${l.startDate} ‚Üí ${l.endDate} (${l.reason})`)
      .join(";\n"); // th√™m xu·ªëng d√≤ng
  };

  if (loading)
    return <div className={cx("loading")}>ƒêang t·∫£i danh s√°ch th·ª£...</div>;

  return (
    <div className={cx("barberList")}>
      <div className={cx("header")}>
        <h2>Qu·∫£n l√Ω th·ª£ c·∫Øt t√≥c</h2>
        <button className={cx("addBtn")} onClick={openAddModal}>
          <FontAwesomeIcon icon={faPlus} /> Th√™m th·ª£ c·∫Øt t√≥c
        </button>
      </div>

      {barbers.length === 0 ? (
        <p className={cx("noData")}>Kh√¥ng c√≥ d·ªØ li·ªáu th·ª£ c·∫Øt t√≥c.</p>
      ) : (
        <table className={cx("table")}>
          <thead>
            <tr>
              <th>Th·ª£ c·∫Øt t√≥c</th>
              <th>Chi nh√°nh</th>
              <th>Ng√†y ngh·ªâ ph√©p</th>
              <th>ƒê√°nh gi√°</th>
              <th>Kh√°ch h√†ng</th>
              <th>Tr·∫°ng th√°i</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {barbers.map((b) => (
              <tr key={b.idBarber}>
                <td>
                  <div className={cx("barberCell")}>
                    <span className={cx("avatar")}>
                      {b.fullName?.charAt(0) || "?"}
                    </span>
                    <span>{b.fullName || "Ch∆∞a c√≥ t√™n"}</span>
                  </div>
                </td>

                <td className={cx("branchCell")}>
                  <FontAwesomeIcon
                    icon={faMapMarkerAlt}
                    className={cx("branchIcon")}
                  />
                  {b.branchName || "Ch∆∞a c√≥"}
                  <button
                    className={cx("editBranchBtn")}
                    onClick={() => openChangeBranchModal(b)}
                    title="ƒê·ªïi chi nh√°nh l√†m vi·ªác"
                  >
                    <FontAwesomeIcon icon={faExchangeAlt} />
                  </button>
                </td>
                <td style={{ whiteSpace: "pre-line" }}>
                  {getLeaveText(b.idBarber)}
                </td>

                <td className={cx("rating")}>
                  <FontAwesomeIcon icon={faStar} className={cx("star")} />{" "}
                  {b.rating || "0.0"}
                </td>
                <td>{b.customers || 0}</td>

                <td>
                  <div className={cx("statusCell")}>
                    <span
                      className={cx("status", {
                        locked: b.isLocked,
                        active: !b.isLocked,
                      })}
                    >
                      {b.isLocked ? "Kh√≥a" : "Ho·∫°t ƒë·ªông"}
                    </span>
                    <button
                      className={cx("lockBtn")}
                      onClick={() => handleToggleLock(b)}
                      title={b.isLocked ? "M·ªü kh√≥a th·ª£" : "Kh√≥a th·ª£"}
                    >
                      <FontAwesomeIcon
                        icon={b.isLocked ? faLockOpen : faLock}
                      />
                    </button>
                  </div>
                </td>

                <td>
                  <div className={cx("actions")}>
                    <button
                      className={cx("editBtn")}
                      onClick={() => openEditModal(b)}
                      title="S·ª≠a th√¥ng tin th·ª£"
                    >
                      <FontAwesomeIcon icon={faPenToSquare} />
                    </button>
                    <button
                      className={cx("deleteBtn")}
                      onClick={() => handleDelete(b)}
                      title="X√≥a th·ª£"
                    >
                      <FontAwesomeIcon icon={faTrash} />
                    </button>
                    <button
                      className={cx("leaveBtn")}
                      onClick={() => openLeaveModal(b)}
                      title="Th√™m l·ªãch ngh·ªâ ph√©p"
                    >
                      üìÖ
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}

      {/* =============== MODAL TH√äM TH·ª¢ =============== */}
      {showModal && (
        <div className={cx("modalOverlay")}>
          <div className={cx("modal")}>
            <h3>Th√™m th·ª£ c·∫Øt t√≥c m·ªõi</h3>
            <form onSubmit={handleSubmit}>
              <label>Email</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                required
                placeholder="Nh·∫≠p email th·ª£"
              />

              <label>M·∫≠t kh·∫©u</label>
              <input
                type="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                required
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
              />

              <label>H·ªç v√† t√™n</label>
              <input
                type="text"
                name="fullName"
                value={formData.fullName}
                onChange={handleChange}
                required
                placeholder="Nh·∫≠p h·ªç v√† t√™n"
              />

              <label>S·ªë ƒëi·ªán tho·∫°i</label>
              <input
                type="text"
                name="phoneNumber"
                value={formData.phoneNumber}
                onChange={handleChange}
                required
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
              />

              <label>Chi nh√°nh l√†m vi·ªác (t√πy ch·ªçn)</label>
              <select
                name="idBranch"
                value={formData.idBranch}
                onChange={handleChange}
              >
                <option value="">-- Kh√¥ng ch·ªçn --</option>
                {branches.map((br) => (
                  <option key={br.idBranch} value={br.idBranch}>
                    {br.name}
                  </option>
                ))}
              </select>

              <label>M√¥ t·∫£ h·ªì s∆°</label>
              <textarea
                name="profileDescription"
                value={formData.profileDescription}
                onChange={handleChange}
                rows="3"
                placeholder="VD: 5 nƒÉm kinh nghi·ªám, chuy√™n fade, u·ªën t√≥c..."
              />

              <div className={cx("modalActions")}>
                <button type="submit" className={cx("saveBtn")}>
                  Th√™m th·ª£
                </button>
                <button
                  type="button"
                  className={cx("cancelBtn")}
                  onClick={() => setShowModal(false)}
                >
                  H·ªßy
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* =============== MODAL ƒê·ªîI CHI NH√ÅNH =============== */}
      {showChangeBranch && (
        <div className={cx("modalOverlay")}>
          <div className={cx("modal")}>
            <h3>ƒê·ªïi chi nh√°nh cho {selectedBarber?.fullName}</h3>
            <form onSubmit={handleChangeBranch}>
              <label>Ch·ªçn chi nh√°nh m·ªõi</label>
              <select
                value={newBranchId}
                onChange={(e) => setNewBranchId(e.target.value)}
                required
              >
                <option value="">-- Ch·ªçn chi nh√°nh --</option>
                {branches.map((br) => (
                  <option key={br.idBranch} value={br.idBranch}>
                    {br.name}
                  </option>
                ))}
              </select>

              <div className={cx("modalActions")}>
                <button type="submit" className={cx("saveBtn")}>
                  C·∫≠p nh·∫≠t
                </button>
                <button
                  type="button"
                  className={cx("cancelBtn")}
                  onClick={() => setShowChangeBranch(false)}
                >
                  H·ªßy
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      {/* =============== MODAL S·ª¨A TH√îNG TIN TH·ª¢ =============== */}
      {showEditModal && (
        <div className={cx("modalOverlay")}>
          <div className={cx("modal")}>
            <h3>C·∫≠p nh·∫≠t th√¥ng tin th·ª£</h3>
            <form onSubmit={handleEditSubmit}>
              <label>H·ªç v√† t√™n</label>
              <input
                type="text"
                name="fullName"
                value={editData.fullName}
                onChange={(e) =>
                  setEditData({ ...editData, fullName: e.target.value })
                }
                required
              />

              <label>Email</label>
              <input
                type="email"
                name="email"
                value={editData.email}
                onChange={(e) =>
                  setEditData({ ...editData, email: e.target.value })
                }
                required
              />

              <label>S·ªë ƒëi·ªán tho·∫°i</label>
              <input
                type="text"
                name="phoneNumber"
                value={editData.phoneNumber}
                onChange={(e) =>
                  setEditData({ ...editData, phoneNumber: e.target.value })
                }
                required
              />

              <label>M·∫≠t kh·∫©u (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng ƒë·ªïi)</label>
              <input
                type="password"
                name="password"
                value={editData.password}
                onChange={(e) =>
                  setEditData({ ...editData, password: e.target.value })
                }
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi n·∫øu mu·ªën"
              />

              <label>Chi nh√°nh</label>
              <select
                name="idBranch"
                value={editData.idBranch}
                onChange={(e) =>
                  setEditData({ ...editData, idBranch: e.target.value })
                }
              >
                <option value="">-- Kh√¥ng ch·ªçn --</option>
                {branches.map((br) => (
                  <option key={br.idBranch} value={br.idBranch}>
                    {br.name}
                  </option>
                ))}
              </select>

              <label>M√¥ t·∫£ h·ªì s∆°</label>
              <textarea
                name="profileDescription"
                value={editData.profileDescription}
                onChange={(e) =>
                  setEditData({
                    ...editData,
                    profileDescription: e.target.value,
                  })
                }
                rows="3"
              />

              <div className={cx("modalActions")}>
                <button type="submit" className={cx("saveBtn")}>
                  L∆∞u thay ƒë·ªïi
                </button>
                <button
                  type="button"
                  className={cx("cancelBtn")}
                  onClick={() => setShowEditModal(false)}
                >
                  H·ªßy
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      {showLeaveModal && (
        <div className={cx("modalOverlay")}>
          <div className={cx("modal")}>
            <h3>Th√™m l·ªãch ngh·ªâ ph√©p cho th·ª£</h3>
            <form onSubmit={handleLeaveSubmit}>
              <label>T·ª´ ng√†y</label>
              <input
                type="date"
                name="startDate"
                value={leaveData.startDate}
                onChange={(e) =>
                  setLeaveData({ ...leaveData, startDate: e.target.value })
                }
                required
              />

              <label>ƒê·∫øn ng√†y</label>
              <input
                type="date"
                name="endDate"
                value={leaveData.endDate}
                onChange={(e) =>
                  setLeaveData({ ...leaveData, endDate: e.target.value })
                }
                required
              />

              <label>L√Ω do</label>
              <textarea
                name="reason"
                value={leaveData.reason}
                onChange={(e) =>
                  setLeaveData({ ...leaveData, reason: e.target.value })
                }
                rows="3"
                placeholder="VD: Ngh·ªâ ·ªëm, ƒëi c√¥ng vi·ªác ri√™ng..."
                required
              />

              <div className={cx("modalActions")}>
                <button type="submit" className={cx("saveBtn")}>
                  L∆∞u ngh·ªâ ph√©p
                </button>
                <button
                  type="button"
                  className={cx("cancelBtn")}
                  onClick={() => setShowLeaveModal(false)}
                >
                  H·ªßy
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default ThoCatToc;
