import React, { useState, useEffect } from "react";
import styles from "./LichHen.module.scss";
import AppointmentCard from "~/components/AppointmentCard";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { fetchBookingsForBarber } from "~/services/bookingService";
import { useAuth } from "~/context/AuthContext";

function LichHen() {
  const { user, accessToken, loading: isAuthLoading } = useAuth();
  const BARBER_ID = user?.idUser;

  const [calendarView, setCalendarView] = useState("day");
  const [currentDate, setCurrentDate] = useState(new Date());
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  const normalizeDate = (dateStr) => dateStr.split("T")[0];
  const formatDate = (d) => d.toISOString().split("T")[0];


  const getDatesForApi = (date, view) => {
    let start = new Date(date);
    let end = new Date(date);

    if (view === "week") {
      // Logic t√≠nh Th·ª© Hai ƒë·∫ßu tu·∫ßn:
      const dayOfWeek = start.getDay(); // 0 (CN) -> 6 (T7)
      // S·ªë ng√†y c·∫ßn l√πi ƒë·ªÉ v·ªÅ Th·ª© Hai. N·∫øu l√† CN (0) th√¨ l√πi 6 ng√†y.
      const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1;

      start.setDate(start.getDate() - daysToSubtract); // B·∫Øt ƒë·∫ßu t·ª´ Th·ª© Hai

      end = new Date(start);
      end.setDate(start.getDate() + 6); // K·∫øt th√∫c v√†o Ch·ªß Nh·∫≠t
    }
    // N·∫øu view l√† 'day', start v√† end gi·ªØ nguy√™n l√† ng√†y hi·ªán t·∫°i.

    // ƒê·ªãnh d·∫°ng sang "YYYY-MM-DD"
    const startStr = start.toISOString().split("T")[0];
    const endStr = end.toISOString().split("T")[0];

    return { startStr, endStr };
  };

  useEffect(() => {
    // üü¢ D·ª™NG N·∫æU AUTH CH∆ØA XONG HO·∫∂C CH∆ØA C√ì ID TH·ª¢/TOKEN
    if (isAuthLoading || !BARBER_ID || !accessToken) {
      if (!isAuthLoading) setLoading(false);
      return;
    }

    const loadBookings = async () => {
      setLoading(true);

      // S·ª¨ D·ª§NG H√ÄM M·ªöI ƒê·ªÇ X√ÅC ƒê·ªäNH PH·∫†M VI NG√ÄY C·∫¶N T·∫¢I
      const { startStr, endStr } = getDatesForApi(currentDate, calendarView);

      try {
        // G·ªçi API v·ªõi ph·∫°m vi ng√†y ƒë√£ x√°c ƒë·ªãnh
        const data = await fetchBookingsForBarber(BARBER_ID, startStr, endStr, accessToken);
        setAppointments(data);
      } catch (err) {
        console.error("L·ªói t·∫£i l·ªãch h·∫πn:", err);
      } finally {
        setLoading(false);
      }
    };

    // Th√™m calendarView v√†o dependency array:
    // API s·∫Ω ƒë∆∞·ª£c g·ªçi l·∫°i khi currentDate ho·∫∑c calendarView thay ƒë·ªïi.
    loadBookings();
  }, [currentDate, calendarView, BARBER_ID, accessToken, isAuthLoading]);

  // ƒêi·ªÅu h∆∞·ªõng ng√†y/tu·∫ßn
  const handleViewChange = (e) => {
    const newView = e.target.value;
    // Khi chuy·ªÉn view, n·∫øu mu·ªën hi·ªÉn th·ªã tu·∫ßn/ng√†y hi·ªán t·∫°i, c√≥ th·ªÉ reset currentDate
    // setCalendarView(newView);
    // setCurrentDate(new Date()); // C√≥ th·ªÉ b·ªè n·∫øu mu·ªën gi·ªØ nguy√™n ng√†y ƒëang xem
    setCalendarView(newView);
  };

  // ƒêi·ªÅu h∆∞·ªõng ng√†y/tu·∫ßn
  const navigateDate = (direction) => {
    const newDate = new Date(currentDate);
    if (calendarView === "day") {
      newDate.setDate(currentDate.getDate() + (direction === "next" ? 1 : -1));
    } else if (calendarView === "week") {
      newDate.setDate(currentDate.getDate() + (direction === "next" ? 7 : -7));
    }
    setCurrentDate(newDate);
  };

  // Text hi·ªÉn th·ªã theo view - D√πng l·∫°i logic t√≠nh ng√†y tu·∫ßn (ƒë√£ s·ª≠a)
  const getDateRangeText = () => {
    if (calendarView === "day") {
      return currentDate.toLocaleDateString("vi-VN", { day: "numeric", month: "long", year: "numeric" });
    } else {
      const { startStr, endStr } = getDatesForApi(currentDate, calendarView);

      const start = new Date(startStr);
      const end = new Date(endStr);

      return `${start.toLocaleDateString("vi-VN", { day: "numeric", month: "short" })} - ${end.toLocaleDateString("vi-VN", { day: "numeric", month: "short", year: "numeric" })}`;
    }
  };

  // L·ªçc l·ªãch h·∫πn cho tu·∫ßn (logic n√†y l·ªçc d·ªØ li·ªáu ƒë√£ c√≥ trong state appointments)
  const getWeekAppointments = () => {
    // T√≠nh to√°n l·∫°i Th·ª© Hai ƒë·∫ßu tu·∫ßn (ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi logic API call)
    const { startStr } = getDatesForApi(currentDate, "week");
    const start = new Date(startStr);

    const days = Array.from({ length: 7 }, (_, i) => {
      const d = new Date(start);
      d.setDate(start.getDate() + i);
      return d;
    });

    return days.map((day) => {
      // L·ªçc c√°c l·ªãch h·∫πn c√≥ trong appointments state (ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ)
      const appts = appointments.filter(
        (appt) => normalizeDate(appt.bookingDate) === formatDate(day)
      );
      return { day, appts };
    });
  };

  // L·ªçc l·ªãch h·∫πn cho ch·∫ø ƒë·ªô xem ng√†y
  const filteredAppointments =
    calendarView === "day"
      ? appointments.filter(
        (appt) => normalizeDate(appt.bookingDate) === formatDate(currentDate)
      )
      : [];


  if (isAuthLoading || loading) return <div className={styles.loading}>ƒêang t·∫£i l·ªãch h·∫πn...</div>;
  if (!BARBER_ID || !accessToken) return <div className={styles.empty}>Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem l·ªãch h·∫πn.</div>;

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h2 className={styles.title}>L·ªãch h·∫πn kh√°ch h√†ng</h2>
        <select
          value={calendarView}
          onChange={(e) => setCalendarView(e.target.value)}
          className={styles.select}
        >
          <option value="day">Theo ng√†y</option>
          <option value="week">Theo tu·∫ßn</option>
        </select>
      </div>

      <div className={styles.nav}>
        <button onClick={() => navigateDate("prev")} className={styles.navBtn}>
          <ChevronLeft size={16} />
        </button>
        <span className={styles.rangeText}>{getDateRangeText()}</span>
        <button onClick={() => navigateDate("next")} className={styles.navBtn}>
          <ChevronRight size={16} />
        </button>
      </div>

      {/* Day View */}
      {calendarView === "day" && (
        <div className={styles.list}>
          {filteredAppointments.length > 0 ? (
            filteredAppointments.map((appt) => (
              <AppointmentCard key={appt.idBooking} appt={appt} view="day" />
            ))
          ) : (
            <p className={styles.empty}>Kh√¥ng c√≥ l·ªãch h·∫πn trong ng√†y n√†y</p>
          )}
        </div>
      )}

      {/* Week View */}
      {calendarView === "week" && (
        <div className={styles.weekGrid}>
          {getWeekAppointments().map(({ day, appts }) => (
            <div key={day.toDateString()} className={styles.weekCol}>
              <div className={styles.weekHeader}>
                {day.toLocaleDateString("vi-VN", { weekday: "short", day: "numeric" })}
              </div>
              <div className={styles.weekAppts}>
                {appts.length > 0 ? (
                  appts.map((appt) => (
                    <AppointmentCard key={appt.idBooking} appt={appt} view="week" />
                  ))
                ) : (
                  <p className={styles.noAppt}>‚Äî</p>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default LichHen;
