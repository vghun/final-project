import { Pinecone } from "@pinecone-database/pinecone";
import axios from "axios";
import { createEmbedding } from "./pineconeService.js";

<<<<<<< HEAD
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL_MAIN = "gemini-2.5-pro";       // Model ch√≠nh t·∫°o ph·∫£n h·ªìi
const GEMINI_MODEL_INTENT = process.env.GEMINI_MODEL;   // Model nh·∫π ph√¢n t√≠ch c√¢u h·ªèi
=======

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL = process.env.GEMINI_MODEL;
>>>>>>> origin/main

// ---------------------
// Kh·ªüi t·∫°o Pinecone
// ---------------------
const pc = new Pinecone({ apiKey: process.env.PINECONE_API_KEY });
const namespace = pc
  .index("project", "project-yfyk5m4.svc.aped-4627-b74a.pinecone.io")
  .namespace("__default__");

// ---------------------
<<<<<<< HEAD
// G·ªçi Gemini API
// ---------------------
async function callGemini(model, payload, retries = 3, delay = 1000) {
  for (let i = 0; i < retries; i++) {
    try {
      const res = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent`,
        payload,
        { headers: { "Content-Type": "application/json", "X-goog-api-key": GEMINI_API_KEY } }
      );
      return res.data;
    } catch (err) {
      if (err.response?.status === 503 && i < retries - 1) {
        await new Promise(r => setTimeout(r, delay));
        delay *= 2;
      } else {
        throw err;
      }
    }
  }
=======
// T·ª´ kh√≥a li√™n quan barber
// ---------------------
const KEYS = ["th·ª£", "barber", "c·∫Øt t√≥c", "t√≥c", "chi nh√°nh", "qu·∫≠n", "fade", "under cut", "t√≥c ng·∫Øn", "t√≥c d√†i"];
function hasRelevantKey(message) {
  return KEYS.some(k => message.toLowerCase().includes(k.toLowerCase()));
>>>>>>> origin/main
}

// ---------------------
// Query Pinecone
// ---------------------
async function queryBarbersByMessage(message, topK = 5) {
  const queryVector = await createEmbedding(message);
  const res = await namespace.query({
    vector: queryVector,
    topK,
    includeMetadata: true,
    includeValues: false,
  });
  return res.matches || [];
}

// ---------------------
<<<<<<< HEAD
// 1Ô∏è‚É£ Agent ph√¢n t√≠ch c√¢u h·ªèi kh√°ch
// ---------------------
async function analyzeIntent(message) {
  const intentPrompt = `
B·∫°n l√† h·ªá th·ªëng ph√¢n lo·∫°i c√¢u h·ªèi c·ªßa kh√°ch h√†ng trong ti·ªám c·∫Øt t√≥c nam.

D·ª±a v√†o c√¢u h·ªèi, h√£y **ph√¢n lo·∫°i ch√≠nh x√°c** n√≥ thu·ªôc nh√≥m n√†o:
- "barber" ‚Üí n·∫øu kh√°ch ƒëang h·ªèi v·ªÅ th·ª£, chi nh√°nh, ki·ªÉu t√≥c, d·ªãch v·ª• ho·∫∑c s·∫£n ph·∫©m t√≥c.
- "general" ‚Üí n·∫øu kh√¥ng li√™n quan ƒë·∫øn ti·ªám t√≥c ho·∫∑c th·ª£.
Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng m·ªôt t·ª´: "barber" ho·∫∑c "general".

### V√≠ d·ª•
- "Ti·ªám m√¨nh th·ª£ n√†o c·∫Øt t√≥c ƒë·∫πp?" ‚Üí barber
- "·ªû chi nh√°nh qu·∫≠n 1 c√≥ ai chuy√™n fade kh√¥ng?" ‚Üí barber
- "Ki·ªÉu t√≥c n√†o h·ª£p v·ªõi m·∫∑t tr√≤n?" ‚Üí barber
- "Th·ªùi ti·∫øt h√¥m nay sao?" ‚Üí general
- "M·∫•y gi·ªù ti·ªám m·ªü c·ª≠a?" ‚Üí barber
- "B·∫°n c√≥ ng∆∞·ªùi y√™u ch∆∞a?" ‚Üí general

C√¢u h·ªèi kh√°ch: "${message}"
Tr·∫£ l·ªùi ch·ªâ m·ªôt t·ª´:
`;

  const payload = { contents: [{ parts: [{ text: intentPrompt }] }] };
  const response = await callGemini(GEMINI_MODEL_INTENT, payload);

  const intent = response?.candidates?.[0]?.content?.parts?.[0]?.text?.trim().toLowerCase() || "general";
  return intent.includes("barber") ? "barber" : "general";
}

// ---------------------
// 2Ô∏è‚É£ G·ªçi model ch√≠nh t·∫°o ph·∫£n h·ªìi
// ---------------------
async function generateResponse(message, barberInfo) {
  const systemPrompt = `
B·∫°n l√† tr·ª£ l√Ω AI c·ªßa barbershop nam.
- Phong c√°ch: th√¢n thi·ªán, t·ª± nhi√™n, l·ªãch s·ª±, c·ªüi m·ªü, d·ªÖ g·∫ßn.
- Tr·∫£ l·ªùi chi ti·∫øt v·ªÅ t√≥c, ki·ªÉu t√≥c, th·ª£, chi nh√°nh ho·∫∑c s·∫£n ph·∫©m chƒÉm s√≥c t√≥c.
- N·∫øu c√≥ d·ªØ li·ªáu t·ª´ Pinecone, h√£y s·ª≠ d·ª•ng ƒë·ªÉ t∆∞ v·∫•n.
- N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ l·ªùi theo ki·∫øn th·ª©c chung, v√† l·ªãch s·ª± xin l·ªói n·∫øu thi·∫øu th√¥ng tin.
- N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn ti·ªám ho·∫∑c t√≥c, h√£y t·ª´ ch·ªëi kh√©o l√©o.

${barberInfo ? "Th√¥ng tin th·ª£ truy xu·∫•t ƒë∆∞·ª£c:\n" + barberInfo : "Kh√¥ng c√≥ d·ªØ li·ªáu th·ª£."}

C√¢u h·ªèi kh√°ch: ${message}
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·ª± nhi√™n, r√µ r√†ng.
`;

  const payload = { contents: [{ parts: [{ text: systemPrompt }] }] };
  const response = await callGemini(GEMINI_MODEL_MAIN, payload);
  return response?.candidates?.[0]?.content?.parts?.map(p => p.text).join("") || "AI kh√¥ng ph·∫£n h·ªìi üòÖ";
}

// ---------------------
// 3Ô∏è‚É£ H√†m ch√≠nh x·ª≠ l√Ω to√†n b·ªô pipeline
// ---------------------
export async function sendMessage({ message }) {
  try {
    // 1. Ph√¢n t√≠ch intent
    const intent = await analyzeIntent(message);

    // 2. N·∫øu l√† barber ‚Üí truy xu·∫•t Pinecone
    let barberInfo = "";
    if (intent === "barber") {
      const barbers = await queryBarbersByMessage(message, 5);
      if (barbers.length) {
        barberInfo = barbers
          .map((b, i) => {
            const meta = b.metadata?.metadata ? JSON.parse(b.metadata.metadata) : {};
            const details = b.metadata?.text?.trim().replace(/\n+/g, " ") || "Kh√¥ng c√≥ chi ti·∫øt";
            return `${i + 1}. ${meta.fullName || "N/A"} (${meta.branchName || "N/A"}) - ${details}`;
          })
          .join("\n");
      }
    }

    // 3. G·ªçi Gemini ch√≠nh t·∫°o ph·∫£n h·ªìi
    const reply = await generateResponse(message, barberInfo);
    return { intent, reply };
  } catch (err) {
    console.error("Gemini Agent error:", err.response?.data || err.message);
    return { reply: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu üò¢" };
  }
}
=======
// G·ªçi Gemini
// ---------------------
async function callGemini(payload, retries = 3, delay = 1000) {
  for (let i = 0; i < retries; i++) {
    try {
      const res = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent`,
        payload,
        { headers: { "Content-Type": "application/json", "X-goog-api-key": GEMINI_API_KEY } }
      );
      return res.data;
    } catch (err) {
      if (err.response?.status === 503 && i < retries - 1) {
        await new Promise(r => setTimeout(r, delay));
        delay *= 2;
      } else {
        throw err;
      }
    }
  }
}

// ---------------------
// H√†m g·ª≠i message
// ---------------------
export async function sendMessage({ message }) {
  try {
    const barbers = hasRelevantKey(message) ? await queryBarbersByMessage(message, 5) : [];
    const barberInfo = barbers.length
      ? barbers
          .map((b, i) => {
            const meta = b.metadata?.metadata ? JSON.parse(b.metadata.metadata) : {};
            const details = b.metadata?.text?.trim().replace(/\n+/g, " ") || "Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt";
            return `${i + 1}. ${meta.fullName || "N/A"} (${meta.branchName || "N/A"}) - ${details}`;
          })
          .join("\n")
      : "";

    const systemPrompt = `
B·∫°n l√† tr·ª£ l√Ω AI cho barbershop nam.
- Phong c√°ch tr·∫£ l·ªùi: Th√¢n thi·ªán, t·ª± nhi√™n, l·ªãch s·ª±, d·ªÖ g·∫ßn,c·ªüi m·ªü ,ƒë∆∞a ra nhi·ªÅu g·ª£i √Ω cho kh√°ch.
- Tr·∫£ l·ªùi chi ti·∫øt v·ªÅ t√≥c, ki·ªÉu t√≥c, s·∫£n ph·∫©m chƒÉm s√≥c t√≥c.
- N·∫øu c√≥ th√¥ng tin th·ª£/barber, s·ª≠ d·ª•ng ƒë·ªÉ t∆∞ v·∫•n.
- N·∫øu kh√¥ng c√≥ th√¥ng tin th·ª£ nh∆∞ng c√¢u h·ªèi li√™n quan t√≥c, t∆∞ v·∫•n d·ª±a tr√™n ki·∫øn th·ª©c chung v√† l·ªãch s·ª± xin l·ªói n·∫øu thi·∫øu d·ªØ li·ªáu.
- N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan t√≥c/barber, t·ª´ ch·ªëi l·ªãch s·ª±, ng·∫Øn g·ªçn.

${barberInfo ? "Th√¥ng tin th·ª£:\n" + barberInfo : ""}

C√¢u h·ªèi kh√°ch: ${message}
H√£y tr·∫£ l·ªùi tr·ª±c ti·∫øp, s√∫c t√≠ch, kh√¥ng th√™m th√¥ng tin ngo√†i y√™u c·∫ßu.
`;

    const payload = { contents: [{ parts: [{ text: systemPrompt }] }] };
    const response = await callGemini(payload);

    const reply = response?.candidates?.[0]?.content?.parts?.map(p => p.text).join("") || "AI kh√¥ng tr·∫£ l·ªùi g√¨ üòÖ";
    return { reply };
  } catch (err) {
    console.error("Gemini API error:", err.response?.data || err.message);
    return { reply: "ƒê√£ x·∫£y ra l·ªói, th·ª≠ l·∫°i sau" };
  }
}
>>>>>>> origin/main
