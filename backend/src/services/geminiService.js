import { Pinecone } from "@pinecone-database/pinecone";
import axios from "axios";
import { createEmbedding } from "./pineconeService.js";


const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL = process.env.GEMINI_MODEL;

// ---------------------
// Kh·ªüi t·∫°o Pinecone
// ---------------------
const pc = new Pinecone({ apiKey: process.env.PINECONE_API_KEY });
const namespace = pc
  .index("project", "project-yfyk5m4.svc.aped-4627-b74a.pinecone.io")
  .namespace("__default__");

// ---------------------
// T·ª´ kh√≥a li√™n quan barber
// ---------------------
const KEYS = ["th·ª£", "barber", "c·∫Øt t√≥c", "t√≥c", "chi nh√°nh", "qu·∫≠n", "fade", "under cut", "t√≥c ng·∫Øn", "t√≥c d√†i"];
function hasRelevantKey(message) {
  return KEYS.some(k => message.toLowerCase().includes(k.toLowerCase()));
}

// ---------------------
// Query Pinecone
// ---------------------
async function queryBarbersByMessage(message, topK = 5) {
  const queryVector = await createEmbedding(message);
  const res = await namespace.query({
    vector: queryVector,
    topK,
    includeMetadata: true,
    includeValues: false,
  });
  return res.matches || [];
}

// ---------------------
// G·ªçi Gemini
// ---------------------
async function callGemini(payload, retries = 3, delay = 1000) {
  for (let i = 0; i < retries; i++) {
    try {
      const res = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent`,
        payload,
        { headers: { "Content-Type": "application/json", "X-goog-api-key": GEMINI_API_KEY } }
      );
      return res.data;
    } catch (err) {
      if (err.response?.status === 503 && i < retries - 1) {
        await new Promise(r => setTimeout(r, delay));
        delay *= 2;
      } else {
        throw err;
      }
    }
  }
}

// ---------------------
// H√†m g·ª≠i message
// ---------------------
export async function sendMessage({ message }) {
  try {
    const barbers = hasRelevantKey(message) ? await queryBarbersByMessage(message, 5) : [];
    const barberInfo = barbers.length
      ? barbers
          .map((b, i) => {
            const meta = b.metadata?.metadata ? JSON.parse(b.metadata.metadata) : {};
            const details = b.metadata?.text?.trim().replace(/\n+/g, " ") || "Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt";
            return `${i + 1}. ${meta.fullName || "N/A"} (${meta.branchName || "N/A"}) - ${details}`;
          })
          .join("\n")
      : "";

    const systemPrompt = `
B·∫°n l√† tr·ª£ l√Ω AI cho barbershop nam.
- Phong c√°ch tr·∫£ l·ªùi: Th√¢n thi·ªán, t·ª± nhi√™n, l·ªãch s·ª±, d·ªÖ g·∫ßn,c·ªüi m·ªü ,ƒë∆∞a ra nhi·ªÅu g·ª£i √Ω cho kh√°ch.
- Tr·∫£ l·ªùi chi ti·∫øt v·ªÅ t√≥c, ki·ªÉu t√≥c, s·∫£n ph·∫©m chƒÉm s√≥c t√≥c.
- N·∫øu c√≥ th√¥ng tin th·ª£/barber, s·ª≠ d·ª•ng ƒë·ªÉ t∆∞ v·∫•n.
- N·∫øu kh√¥ng c√≥ th√¥ng tin th·ª£ nh∆∞ng c√¢u h·ªèi li√™n quan t√≥c, t∆∞ v·∫•n d·ª±a tr√™n ki·∫øn th·ª©c chung v√† l·ªãch s·ª± xin l·ªói n·∫øu thi·∫øu d·ªØ li·ªáu.
- N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan t√≥c/barber, t·ª´ ch·ªëi l·ªãch s·ª±, ng·∫Øn g·ªçn.

${barberInfo ? "Th√¥ng tin th·ª£:\n" + barberInfo : ""}

C√¢u h·ªèi kh√°ch: ${message}
H√£y tr·∫£ l·ªùi tr·ª±c ti·∫øp, s√∫c t√≠ch, kh√¥ng th√™m th√¥ng tin ngo√†i y√™u c·∫ßu.
`;

    const payload = { contents: [{ parts: [{ text: systemPrompt }] }] };
    const response = await callGemini(payload);

    const reply = response?.candidates?.[0]?.content?.parts?.map(p => p.text).join("") || "AI kh√¥ng tr·∫£ l·ªùi g√¨ üòÖ";
    return { reply };
  } catch (err) {
    console.error("Gemini API error:", err.response?.data || err.message);
    return { reply: "ƒê√£ x·∫£y ra l·ªói, th·ª≠ l·∫°i sau" };
  }
}