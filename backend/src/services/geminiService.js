import { Pinecone } from "@pinecone-database/pinecone";
import axios from "axios";
import { createEmbedding } from "./pineconeService.js";

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_MODEL_MAIN = "gemini-2.5-flash";      
const GEMINI_MODEL_INTENT = process.env.GEMINI_MODEL;   

// ---------------------
// Kh·ªüi t·∫°o Pinecone client
// ---------------------
const pc = new Pinecone({ apiKey: process.env.PINECONE_API_KEY });
const index = pc.index("project", "project-yfyk5m4.svc.aped-4627-b74a.pinecone.io");

// ---------------------
// G·ªçi Gemini API
// ---------------------
async function callGemini(model, payload, retries = 3, delay = 1000) {
  for (let i = 0; i < retries; i++) {
    try {
      const res = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent`,
        payload,
        { headers: { "Content-Type": "application/json", "X-goog-api-key": GEMINI_API_KEY } }
      );
      return res.data;
    } catch (err) {
      if (err.response?.status === 503 && i < retries - 1) {
        await new Promise(r => setTimeout(r, delay));
        delay *= 2;
      } else {
        throw err;
      }
    }
  }
}

// ---------------------
// Ph√¢n t√≠ch intent t·ª´ kh√°ch
// ---------------------
async function analyzeIntent(message) {
  const intentPrompt = `
B·∫°n l√† h·ªá th·ªëng ph√¢n lo·∫°i c√¢u h·ªèi kh√°ch h√†ng c·ªßa barbershop.
Ch·ªâ tr·∫£ v·ªÅ m·ªôt t·ª´:
- "branches" ‚Üí n·∫øu kh√°ch h·ªèi v·ªÅ chi nh√°nh ho·∫∑c d·ªãch v·ª•
- "barbers" ‚Üí n·∫øu kh√°ch h·ªèi v·ªÅ th·ª£, ki·ªÉu t√≥c, s·∫£n ph·∫©m t√≥c
- "general" ‚Üí n·∫øu kh√¥ng li√™n quan t·ªõi ti·ªám

V√≠ d·ª•:
- "Chi nh√°nh n√†o g·∫ßn t√¥i?" ‚Üí branches
- "·ªû chi nh√°nh qu·∫≠n 1 c√≥ ai chuy√™n fade kh√¥ng?" ‚Üí barbers
- "M·∫•y gi·ªù m·ªü c·ª≠a?" ‚Üí branches
- "B·∫°n c√≥ ng∆∞·ªùi y√™u ch∆∞a?" ‚Üí general

C√¢u h·ªèi: "${message}"
Tr·∫£ l·ªùi m·ªôt t·ª´:`;

  const payload = { contents: [{ parts: [{ text: intentPrompt }] }] };
  const response = await callGemini(GEMINI_MODEL_INTENT, payload);

  const intent = response?.candidates?.[0]?.content?.parts?.[0]?.text?.trim().toLowerCase() || "general";

  // Ch·ªâ tr·∫£ v·ªÅ "barbers" ho·∫∑c "branches", n·∫øu kh√¥ng th√¨ default general
  if (intent === "barbers" || intent === "branches") return intent;
  return "general";
}

// ---------------------
// Query Pinecone d·ª±a tr√™n namespace
// ---------------------
async function queryPineconeByMessage(message, namespace, topK = 5) {
  const queryVector = await createEmbedding(message);
  const nsIndex = index.namespace(namespace);
  const res = await nsIndex.query({
    vector: queryVector,
    topK,
    includeMetadata: true,
    includeValues: false,
  });

  return res.matches || [];
}

// ---------------------
// H√†m ch√≠nh x·ª≠ l√Ω pipeline
// ---------------------
export async function sendMessage({ message }) {
  try {
    // 1Ô∏è‚É£ Ph√¢n t√≠ch intent
    const intent = await analyzeIntent(message);

    let pineconeInfo = "";
    if (intent === "barbers" || intent === "branches") {
      // 2Ô∏è‚É£ Query ƒë√∫ng namespace
      const results = await queryPineconeByMessage(message, intent, 5);

      if (results.length) {
        pineconeInfo = results
          .map((r, i) => {
            const meta = r.metadata?.metadata ? JSON.parse(r.metadata.metadata) : {};
            const details = r.metadata?.text?.trim().replace(/\n+/g, " ") || "Kh√¥ng c√≥ chi ti·∫øt";
            return `${i + 1}. ${meta.fullName || meta.name || "N/A"} (${meta.branchName || meta.address || "N/A"}) - ${details}`;
          })
          .join("\n");
      }
    }

    // 3Ô∏è‚É£ G·ªçi Gemini ch√≠nh t·∫°o ph·∫£n h·ªìi
    const systemPrompt = `
B·∫°n l√† tr·ª£ l√Ω AI c·ªßa barbershop nam.
- Phong c√°ch: th√¢n thi·ªán, t·ª± nhi√™n, l·ªãch s·ª±, c·ªüi m·ªü, d·ªÖ g·∫ßn.
- Tr·∫£ l·ªùi chi ti·∫øt v·ªÅ t√≥c, ki·ªÉu t√≥c, th·ª£, chi nh√°nh ho·∫∑c s·∫£n ph·∫©m chƒÉm s√≥c t√≥c.
- N·∫øu c√≥ d·ªØ li·ªáu t·ª´ Pinecone, h√£y s·ª≠ d·ª•ng ƒë·ªÉ t∆∞ v·∫•n.
- N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ l·ªùi theo ki·∫øn th·ª©c chung, v√† l·ªãch s·ª± xin l·ªói n·∫øu thi·∫øu th√¥ng tin.
- N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn ti·ªám ho·∫∑c t√≥c, h√£y t·ª´ ch·ªëi kh√©o l√©o.

${pineconeInfo ? "Th√¥ng tin t·ª´ Pinecone:\n" + pineconeInfo : "Kh√¥ng c√≥ d·ªØ li·ªáu."}

C√¢u h·ªèi kh√°ch: ${message}
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·ª± nhi√™n, r√µ r√†ng.
`;

    const payload = { contents: [{ parts: [{ text: systemPrompt }] }] };
    const response = await callGemini(GEMINI_MODEL_MAIN, payload);

    const reply = response?.candidates?.[0]?.content?.parts?.map(p => p.text).join("") || "AI kh√¥ng ph·∫£n h·ªìi üòÖ";

    return { intent, reply };
  } catch (err) {
    console.error("Gemini Agent error:", err.response?.data || err.message);
    return { reply: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu üò¢" };
  }
}
