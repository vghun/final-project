import db from "../models/index.js";
import { upsertBarbers } from "./pineconeService.js";
import { fn, col, Op } from "sequelize";
import ratingService from "./ratingService.js"; 
const Barber = db.Barber;

export const getAllBarbers = async () => {
  try {
    const barbers = await db.Barber.findAll({
      include: [
        { model: db.User, as: "user", attributes: ["fullName", "createdAt"] },
        { model: db.Branch, as: "branch", attributes: ["name"] },
        { model: db.BarberRatingSummary, as: "ratingSummary", attributes: ["avgRate"] },
        {
          model: db.Booking,
          as: "Bookings",
          attributes: ["idBooking", "idCustomer"], // üëà l·∫•y idCustomer ƒë·ªÉ ƒë·∫øm kh√°ch
        },
      ],
    });

    if (!barbers.length) {
      return { message: "Kh√¥ng c√≥ d·ªØ li·ªáu barber." };
    }

    const now = new Date();

    const barberData = barbers.map((b) => {
      // üîπ T√≠nh kinh nghi·ªám (nƒÉm)
      const startDate = b.user?.createdAt ? new Date(b.user.createdAt) : now;
      const expYears = Math.max(0, now.getFullYear() - startDate.getFullYear());

      // üîπ T√≠nh s·ªë l∆∞·ª£ng kh√°ch h√†ng duy nh·∫•t
      const customerIds = b.Bookings?.map((bk) => bk.idCustomer).filter(Boolean) || [];
      const totalCustomers = new Set(customerIds).size;

      return {
        idBarber: b.idBarber,
        fullName: b.user?.fullName || "Ch∆∞a c√≥ t√™n",
        branchName: b.branch?.name || "Ch∆∞a c√≥ chi nh√°nh",
        exp: `${expYears} nƒÉm`,
        rating: Number(b.ratingSummary?.avgRate || 0).toFixed(1),
        customers: totalCustomers,
        isLocked: b.isLocked,
        isApproved: b.isApproved,
      };
    });

    return {
      total: barberData.length,
      barbers: barberData,
    };
  } catch (error) {
    console.error("Get All Barbers Error:", error);
    throw new Error("L·ªói server khi l·∫•y danh s√°ch barber: " + error.message);
  }
};

export const syncBarbersToPinecone = async () => {
  try {
    const barbers = await db.Barber.findAll({
      include: [
        { model: db.User, as: "user", attributes: ["fullName"] },
        { model: db.Branch, as: "branch", attributes: ["name"] },
        { model: db.BarberRatingSummary, as: "ratingSummary", attributes: ["avgRate"] }, // üëà th√™m d√≤ng n√†y
      ],
    });

    if (!barbers.length) {
      return { message: " Kh√¥ng c√≥ d·ªØ li·ªáu barber ƒë·ªÉ ƒë·ªìng b·ªô." };
    }

    const barberData = barbers.map((b) => ({
      idBarber: b.idBarber,
      idBranch: b.idBranch,
      fullName: b.user?.fullName || "Ch∆∞a c√≥ t√™n",
      branchName: b.branch?.name || "Ch∆∞a c√≥ chi nh√°nh",
      profileDescription: b.profileDescription || "Kh√¥ng c√≥ m√¥ t·∫£",
      avgRate: b.ratingSummary?.avgRate || 0,
      displayText: `T√™n barber: ${b.user?.fullName || "Ch∆∞a c√≥ t√™n"}, Chi nh√°nh: ${b.branch?.name || "Ch∆∞a c√≥ chi nh√°nh"}, M√¥ t·∫£: ${b.profileDescription || "Kh√¥ng c√≥ m√¥ t·∫£"}, ƒê√°nh gi√° trung b√¨nh: ${b.ratingSummary?.avgRate || 0}`,
    }));


    await upsertBarbers(barberData);

    return { message: "Barber data synced to Pinecone (test).", total: barberData.length };
  } catch (error) {

    return { message: " L·ªói server", error: error.message };
  }
};

export const assignUserAsBarber = async (data) => {
  const t = await db.sequelize.transaction();
  try {
    const { idUser, idBranch, profileDescription } = data;

    // 1Ô∏è‚É£ Ki·ªÉm tra user t·ªìn t·∫°i
    const user = await db.User.findByPk(idUser);
    if (!user) {
      throw new Error("Kh√¥ng t√¨m th·∫•y user");
    }

    // 2Ô∏è‚É£ C·∫≠p nh·∫≠t role = 'barber' (n·∫øu ch∆∞a ph·∫£i barber)
    if (user.role !== "barber") {
      user.role = "barber";
      await user.save({ transaction: t });
    }

    // 3Ô∏è‚É£ Ki·ªÉm tra xem ƒë√£ c√≥ record trong b·∫£ng barbers ch∆∞a
    let barber = await db.Barber.findByPk(idUser);

    if (!barber) {
      // üîπ N·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi
      barber = await db.Barber.create(
        {
          idBarber: idUser,
          idBranch: idBranch || null,
          profileDescription: profileDescription || "Ch∆∞a c√≥ m√¥ t·∫£",
          isLocked: false,
        },
        { transaction: t }
      );
    } else {
      // üîπ N·∫øu c√≥ r·ªìi th√¨ c·∫≠p nh·∫≠t
      barber.idBranch = idBranch ?? barber.idBranch;
      barber.profileDescription = profileDescription ?? barber.profileDescription;
      await barber.save({ transaction: t });
    }

    await t.commit();

    return {
      message: "Ph√¢n c√¥ng user th√†nh barber th√†nh c√¥ng",
      user,
      barber,
    };
  } catch (error) {
    await t.rollback();
    throw new Error("L·ªói khi ph√¢n c√¥ng user th√†nh barber: " + error.message);
  }
};

export const assignBarberToBranch = async (idBarber, idBranch) => {
  const barber = await Barber.findByPk(idBarber);
  if (!barber) throw new Error("Khong t√¨m th·∫•y barber");
  barber.idBranch = idBranch;
  await barber.save();
  return barber;
};

export const approveBarber = async (idBarber) => {
  const barber = await Barber.findByPk(idBarber);
  if (!barber) throw new Error("Khong t√¨m th·∫•y barber");
  barber.isApproved = true;
  await barber.save();
  return barber;
};

export const lockBarber = async (idBarber) => {
  const barber = await Barber.findByPk(idBarber);
  if (!barber) throw new Error("Khong t√¨m th·∫•y barber");
  barber.isLocked = true;
  await barber.save();
  return barber;
};

export const unlockBarber = async (idBarber) => {
  const barber = await Barber.findByPk(idBarber);
  if (!barber) throw new Error("Khong t√¨m th·∫•y barber");
  barber.isLocked = false;
  await barber.save();
  return barber;
};
export const calculateBarberReward = async (idBarber) => {
  const now = new Date();
  const month = now.getMonth() + 1;
  const year = now.getFullYear();
  const startDate = new Date(year, month - 1, 1);
  const endDate = new Date(year, month, 1);

  // === 1Ô∏è‚É£ T·ªïng doanh thu t·ª´ booking_details ===
  const serviceRevenue = await db.BookingDetail.sum("price", {
    include: [
      {
        model: db.Booking,
        as: "booking", // ‚úÖ alias ƒë√∫ng theo model BookingDetail
        where: {
          idBarber,
          isPaid: true,
          bookingDate: { [Op.gte]: startDate, [Op.lt]: endDate },
        },
        attributes: [],
      },
    ],
  });

  // === 2Ô∏è‚É£ T·ªïng ti·ªÅn tip t·ª´ booking_tips ===
  const tipAmount = await db.BookingTip.sum("tipAmount", {
    where: { idBarber },
    include: [
      {
        model: db.Booking,
        as: "booking", // ‚úÖ alias ƒë√∫ng theo model BookingTip
        where: {
          isPaid: true,
          bookingDate: { [Op.gte]: startDate, [Op.lt]: endDate },
        },
        attributes: [],
      },
    ],
  });

  const totalServiceRevenue = parseFloat(serviceRevenue || 0);
  const totalTipAmount = parseFloat(tipAmount || 0);

  const rewardRules = await db.BonusRule.findAll({
    where: { active: true },
    order: [["minRevenue", "ASC"]],
    raw: true,
  });

  if (!rewardRules || rewardRules.length === 0)
    throw new Error("Kh√¥ng c√≥ m·ªëc th∆∞·ªüng n√†o trong h·ªá th·ªëng.");

  // === 4Ô∏è‚É£ X√°c ƒë·ªãnh m·ªëc hi·ªán t·∫°i v√† m·ªëc k·∫ø ti·∫øp ===
  let currentRule = rewardRules[0];
  let nextRule = null;

  for (let i = 0; i < rewardRules.length; i++) {
    if (totalServiceRevenue >= rewardRules[i].minRevenue) {
      currentRule = rewardRules[i];
      nextRule = rewardRules[i + 1] || null;
    }
  }

  const bonus = Math.floor((totalServiceRevenue * currentRule.bonusPercent) / 100);
  const percentRevenue = nextRule
    ? Math.min((totalServiceRevenue / nextRule.minRevenue) * 100, 100)
    : 100;

  return {
    idBarber,
    month,
    year,
    serviceRevenue: totalServiceRevenue,
    tipAmount: totalTipAmount,
    bonus,
    percentRevenue,
    currentRule,
    nextRule,
    rewardRules,
  };
};

export const createBarberWithUser = async (data) => {
  const t = await db.sequelize.transaction();
  try {
    const { email, password, fullName, phoneNumber, idBranch, profileDescription } = data;

    // 1Ô∏è‚É£ Ki·ªÉm tra email tr√πng
    const existed = await db.User.findOne({ where: { email } });
    if (existed) {
      throw new Error("Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!");
    }

    // 2Ô∏è‚É£ Hash password
    const bcrypt = await import("bcrypt");
    const hashedPassword = await bcrypt.default.hash(password, 10);

    // 3Ô∏è‚É£ T·∫°o user m·ªõi v·ªõi role = barber
    const newUser = await db.User.create(
      {
        email,
        password: hashedPassword,
        fullName,
        phoneNumber,
        role: "barber",
        isStatus: true,
      },
      { transaction: t }
    );

    // 4Ô∏è‚É£ T·∫°o b·∫£n ghi barber ‚Äî cho ph√©p idBranch = null
    const newBarber = await db.Barber.create(
      {
        idBarber: newUser.idUser,
        idBranch: idBranch || null, // ‚úÖ Cho ph√©p null
        profileDescription: profileDescription || "Ch∆∞a c√≥ m√¥ t·∫£",
        isLocked: false,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      { transaction: t }
    );

    await t.commit();

    return {
      message: "T·∫°o th·ª£ c·∫Øt t√≥c m·ªõi th√†nh c√¥ng!",
      user: {
        idUser: newUser.idUser,
        email: newUser.email,
        fullName: newUser.fullName,
        phoneNumber: newUser.phoneNumber,
        role: newUser.role,
      },
      barber: newBarber,
    };
  } catch (error) {
    await t.rollback();
    console.error("L·ªói khi t·∫°o barber m·ªõi:", error);
    throw new Error("L·ªói khi t·∫°o barber m·ªõi: " + error.message);
  }
};


export const updateBarber = async (idBarber, data) => {
  const t = await db.sequelize.transaction();
  try {
    const barber = await db.Barber.findByPk(idBarber, {
      include: [{ model: db.User, as: "user" }],
      transaction: t,
    });

    if (!barber) throw new Error("Kh√¥ng t√¨m th·∫•y barber");

    // üîπ C·∫≠p nh·∫≠t th√¥ng tin User (n·∫øu c√≥)
    if (data.fullName) barber.user.fullName = data.fullName;
    if (data.phoneNumber) barber.user.phoneNumber = data.phoneNumber;
    if (data.email) barber.user.email = data.email;
    if (data.password) {
      barber.user.password = await bcrypt.hash(data.password, 10); // hash m·ªõi
    }
    await barber.user.save({ transaction: t });

    // üîπ C·∫≠p nh·∫≠t th√¥ng tin Barber
    if (data.idBranch !== undefined) barber.idBranch = data.idBranch || null;
    if (data.profileDescription !== undefined)
      barber.profileDescription = data.profileDescription;
    await barber.save({ transaction: t });

    await t.commit();
    return { message: "C·∫≠p nh·∫≠t barber th√†nh c√¥ng!", barber };
  } catch (error) {
    await t.rollback();
    throw new Error("L·ªói khi c·∫≠p nh·∫≠t barber: " + error.message);
  }
};

// üîπ X√≥a barber (v√† user li√™n k·∫øt)
export const deleteBarber = async (idBarber) => {
  const t = await db.sequelize.transaction();
  try {
    const barber = await db.Barber.findByPk(idBarber, { transaction: t });
    if (!barber) throw new Error("Kh√¥ng t√¨m th·∫•y barber");

    // Do c√≥ foreign key ON DELETE CASCADE, x√≥a user s·∫Ω x√≥a lu√¥n barber
    await db.User.destroy({
      where: { idUser: idBarber },
      transaction: t,
    });

    await t.commit();
    return { message: "X√≥a barber th√†nh c√¥ng!" };
  } catch (error) {
    await t.rollback();
    throw new Error("L·ªói khi x√≥a barber: " + error.message);
  }
};

export const addBarberUnavailability = async (data) => {
  const { idBarber, startDate, endDate, reason } = data;

  if (!idBarber || !startDate || !endDate || !reason) {
    throw new Error("Thi·∫øu th√¥ng tin y√™u c·∫ßu.");
  }

  const barber = await db.Barber.findByPk(idBarber);
  if (!barber) {
    throw new Error("Kh√¥ng t√¨m th·∫•y th·ª£ c·∫Øt t√≥c.");
  }

  // üîπ Ki·ªÉm tra tr√πng l·ªãch ngh·ªâ
  const overlap = await db.BarberUnavailability.findOne({
    where: {
      idBarber,
      [db.Sequelize.Op.or]: [
        {
          startDate: { [db.Sequelize.Op.between]: [startDate, endDate] },
        },
        {
          endDate: { [db.Sequelize.Op.between]: [startDate, endDate] },
        },
        {
          [db.Sequelize.Op.and]: [
            { startDate: { [db.Sequelize.Op.lte]: startDate } },
            { endDate: { [db.Sequelize.Op.gte]: endDate } },
          ],
        },
      ],
    },
  });

  if (overlap) {
    throw new Error("‚ùå Th·ª£ n√†y ƒë√£ c√≥ l·ªãch ngh·ªâ trong kho·∫£ng th·ªùi gian n√†y!");
  }

  // üîπ T·∫°o m·ªõi n·∫øu kh√¥ng tr√πng
  const record = await db.BarberUnavailability.create({
    idBarber,
    startDate,
    endDate,
    reason,
  });

  return {
    message: " ƒê√£ th√™m l·ªãch ngh·ªâ ph√©p th√†nh c√¥ng.",
    record,
  };
};

export const getUnavailabilitiesByBarber = async (idBarber) => {
  const records = await db.BarberUnavailability.findAll({
    where: { idBarber },
    order: [["startDate", "ASC"]],
  });
  return records;
};

export const getProfile = async (idBarber) => {
  const barber = await Barber.findOne({
    where: { idBarber },
    include: [
      {
        model: db.User,
        as: "user",
        attributes: ["fullName", "image", "phoneNumber", "email"],
      },
      {
        model: db.Branch,
        as: "branch",
        attributes: ["name", "address"],
      },
    ],
  });

  if (!barber) throw new Error("Kh√¥ng t√¨m th·∫•y th·ª£.");

  const ratingSummary = await ratingService.getRatingSummaryByBarber(idBarber);

  return {
    idBarber: barber.idBarber,
    fullName: barber.user?.fullName || "",
    image: barber.user?.image || "",
    phoneNumber: barber.user?.phoneNumber || "",
    email: barber.user?.email || "",
    branchName: barber.branch?.name || "Ch∆∞a c√≥ chi nh√°nh",
    branchAddress: barber.branch?.address || "",
    profileDescription: barber.profileDescription || "",
    avgRate: ratingSummary?.avgRate || 0,
    totalRate: ratingSummary?.totalRate || 0,
  };
};

export const updateProfile = async (idBarber, payload) => {
  const barber = await Barber.findByPk(idBarber, {
    include: [{ model: db.User, as: "user" }],
  });

  if (!barber) throw new Error("Kh√¥ng t√¨m th·∫•y th·ª£.");

  const { fullName, image, phoneNumber, email, idBranch, profileDescription } =
    payload;

  if (barber.user) {
    await barber.user.update({
      fullName: fullName ?? barber.user.fullName,
      image: image ?? barber.user.image,
      phoneNumber: phoneNumber ?? barber.user.phoneNumber,
      email: email ?? barber.user.email,
    });
  }

  await barber.update({
    idBranch: idBranch ?? barber.idBranch,
    profileDescription: profileDescription ?? barber.profileDescription,
  });

  return { message: "C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng." };
};

const { Reel, ReelView, Booking, BarberRatingSummary } = db; 
// H√†m t√≠nh to√°n % thay ƒë·ªïi
const calculateChange = (current, previous) => {
    if (previous === 0) return current > 0 ? 100 : 0;
    return Math.round(((current - previous) / previous) * 100);
};

// H√†m l·∫•y th·ªëng k√™ l∆∞·ª£t xem Reels
const getReelViewsStats = async (idBarber, startOfWeek, endOfWeek, startOfLastWeek, endOfLastWeek) => {
    const barberReels = await Reel.findAll({
        where: { idBarber },
        attributes: ['idReel']
    });
    const reelIds = barberReels.map(r => r.idReel);

    if (reelIds.length === 0) {
        return { currentWeekViews: 0, lastWeekViews: 0 };
    }

    const [currentWeekViews, lastWeekViews] = await Promise.all([
        ReelView.count({
            where: {
                idReel: { [Op.in]: reelIds },
                lastViewedAt: { [Op.between]: [startOfWeek, endOfWeek] }, 
            },
            distinct: true, 
            col: 'idUser'
        }),
        ReelView.count({
            where: {
                idReel: { [Op.in]: reelIds },
                lastViewedAt: { [Op.between]: [startOfLastWeek, endOfLastWeek] },
            },
            distinct: true,
            col: 'idUser'
        }),
    ]);
    
    return { currentWeekViews, lastWeekViews };
};


export const getDashboardStats = async (idBarber) => {
    // 1. T√≠nh to√°n kho·∫£ng th·ªùi gian (ƒê√É S·ª¨A L·ªñI)
    const now = new Date();
    const today = now.getDay(); 
    // Logic t√≠nh ng√†y ƒë·∫ßu tu·∫ßn (Th·ª© 2, n·∫øu today = 0 (CN) th√¨ tr·ª´ ƒëi 6 ng√†y)
    const diff = now.getDate() - today + (today === 0 ? -6 : 1); 

    // üü¢ S·ª¨A L·ªñI: CLONE ƒë·ªëi t∆∞·ª£ng Date tr∆∞·ªõc khi setDate
    const startOfWeek = new Date(new Date().setDate(diff)); 
    startOfWeek.setHours(0, 0, 0, 0);

    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6);
    endOfWeek.setHours(23, 59, 59, 999);

    const startOfLastWeek = new Date(startOfWeek);
    startOfLastWeek.setDate(startOfLastWeek.getDate() - 7); // Ph·∫£i tr·ª´ 7 ng√†y t·ª´ startOfWeek ƒë√£ s·ª≠a
    const endOfLastWeek = new Date(startOfWeek);
    endOfLastWeek.setDate(endOfLastWeek.getDate() - 1); // Ph·∫£i tr·ª´ 1 ng√†y t·ª´ startOfWeek ƒë√£ s·ª≠a
    endOfLastWeek.setHours(23, 59, 59, 999);
    
    // 2. G·ªçi API/Service ƒë·ªÉ l·∫•y d·ªØ li·ªáu song song (ƒê√É TH√äM || 0 ƒê·ªÇ NGƒÇN NULL)
    // ƒê·∫£m b·∫£o c√°c model BookingDetail v√† Booking ƒë√£ ƒë∆∞·ª£c khai b√°o/import
    const [
        reelViewStats,
        ratingSummary,
        rawCurrentWeekRevenue, // ƒê·ªïi t√™n ƒë·ªÉ d·ªÖ x·ª≠ l√Ω null
        rawLastWeekRevenue,    // ƒê·ªïi t√™n ƒë·ªÉ d·ªÖ x·ª≠ l√Ω null
        currentWeekAppts,
        lastWeekAppts
    ] = await Promise.all([
        // Reels Views
        getReelViewsStats(idBarber, startOfWeek, endOfWeek, startOfLastWeek, endOfLastWeek),
        
        // ƒê√°nh gi√°
        db.BarberRatingSummary.findOne({ where: { idBarber } }), 
        
        // Doanh thu tu·∫ßn n√†y
        db.BookingDetail.sum("price", {
            include: [{ 
                model: db.Booking, as: "booking", 
                where: {
                    idBarber, isPaid: true, status: 'COMPLETED',
                    bookingDate: { [Op.between]: [startOfWeek, endOfWeek] }
                }, 
                attributes: [] 
            }]
        }), // KH√îNG d√πng || 0 ·ªü ƒë√¢y, ƒë·ªÉ n√≥ l√† null n·∫øu sum kh√¥ng c√≥
        
        // Doanh thu tu·∫ßn tr∆∞·ªõc
        db.BookingDetail.sum("price", {
            include: [{ 
                model: db.Booking, as: "booking", 
                where: {
                    idBarber, isPaid: true, status: 'COMPLETED',
                    bookingDate: { [Op.between]: [startOfLastWeek, endOfLastWeek] }
                }, 
                attributes: [] 
            }]
        }), // KH√îNG d√πng || 0 ·ªü ƒë√¢y, ƒë·ªÉ n√≥ l√† null n·∫øu sum kh√¥ng c√≥
        
        // L·ªãch h·∫πn tu·∫ßn n√†y
        db.Booking.count({
            where: {
                idBarber,
                status: { [Op.in]: ['COMPLETED', 'CONFIRMED'] }, 
                bookingDate: { [Op.between]: [startOfWeek, endOfWeek] },
            },
        }),
        
        // L·ªãch h·∫πn tu·∫ßn tr∆∞·ªõc
        db.Booking.count({
            where: {
                idBarber,
                status: { [Op.in]: ['COMPLETED', 'CONFIRMED'] },
                bookingDate: { [Op.between]: [startOfLastWeek, endOfLastWeek] },
            },
        }),
    ]);
    
    const currentRevenue = parseFloat(rawCurrentWeekRevenue || 0);
    const lastRevenue = parseFloat(rawLastWeekRevenue || 0);
    
    // 3. T·ªïng h·ª£p k·∫øt qu·∫£
    const avgRating = parseFloat(ratingSummary?.avgRating) || 0;
    const totalRatings = parseInt(ratingSummary?.totalReviews) || 0; 

    return {
        // 1. L·ªãch h·∫πn tu·∫ßn n√†y
        appointmentsCount: currentWeekAppts,
        appointmentsChange: calculateChange(currentWeekAppts, lastWeekAppts),

        // 2. L∆∞·ª£t xem Reels tu·∫ßn
        reelViews: reelViewStats.currentWeekViews,
        reelViewsChange: calculateChange(reelViewStats.currentWeekViews, reelViewStats.lastWeekViews),

        // 3. Doanh thu tu·∫ßn (ƒê√É S·ª¨A V√Ä ƒê·∫¢M B·∫¢O KH√îNG C√ì NULL)
        weeklyRevenue: currentRevenue,
        weeklyRevenueChange: calculateChange(currentRevenue, lastRevenue),

        // 4. ƒê√°nh gi√° tr·ªçn ƒë·ªùi
        avgRating: avgRating,
        totalRatings: totalRatings,
    };
};