import db from "../models/index.js";
import { upsertBarbers } from "./pineconeService.js";
const Barber = db.Barber;
// L·∫•y to√†n b·ªô barber t·ª´ DB


export const getAllBarbers = async () => {
  try {
    const barbers = await db.Barber.findAll({
      include: [
        { model: db.User, as: "user", attributes: ["fullName", "createdAt"] },
        { model: db.Branch, as: "branch", attributes: ["name"] },
        { model: db.BarberRatingSummary, as: "ratingSummary", attributes: ["avgRate"] },
        {
          model: db.Booking,
          as: "Bookings",
          attributes: ["idBooking", "idCustomer"], // üëà l·∫•y idCustomer ƒë·ªÉ ƒë·∫øm kh√°ch
        },
      ],
    });

    if (!barbers.length) {
      return { message: "Kh√¥ng c√≥ d·ªØ li·ªáu barber." };
    }

    const now = new Date();

    const barberData = barbers.map((b) => {
      // üîπ T√≠nh kinh nghi·ªám (nƒÉm)
      const startDate = b.user?.createdAt ? new Date(b.user.createdAt) : now;
      const expYears = Math.max(0, now.getFullYear() - startDate.getFullYear());

      // üîπ T√≠nh s·ªë l∆∞·ª£ng kh√°ch h√†ng duy nh·∫•t
      const customerIds = b.Bookings?.map((bk) => bk.idCustomer).filter(Boolean) || [];
      const totalCustomers = new Set(customerIds).size;

      return {
        idBarber: b.idBarber,
        fullName: b.user?.fullName || "Ch∆∞a c√≥ t√™n",
        branchName: b.branch?.name || "Ch∆∞a c√≥ chi nh√°nh",
        exp: `${expYears} nƒÉm`,
        rating: Number(b.ratingSummary?.avgRate || 0).toFixed(1),
        customers: totalCustomers,
        isLocked: b.isLocked,
        isApproved: b.isApproved,
      };
    });

    return {
      total: barberData.length,
      barbers: barberData,
    };
  } catch (error) {
    console.error("Get All Barbers Error:", error);
    throw new Error("L·ªói server khi l·∫•y danh s√°ch barber: " + error.message);
  }
};

export const syncBarbersToPinecone = async () => {
  try {
    const barbers = await db.Barber.findAll({
      include: [
        { model: db.User, as: "user", attributes: ["fullName"] },
        { model: db.Branch, as: "branch", attributes: ["name"] },
        { model: db.BarberRatingSummary, as: "ratingSummary", attributes: ["avgRate"] }, // üëà th√™m d√≤ng n√†y
      ],
    });

    if (!barbers.length) {
      return { message: " Kh√¥ng c√≥ d·ªØ li·ªáu barber ƒë·ªÉ ƒë·ªìng b·ªô." };
    }

    const barberData = barbers.map((b) => ({
      idBarber: b.idBarber,
      idBranch: b.idBranch,
      fullName: b.user?.fullName || "Ch∆∞a c√≥ t√™n",
      branchName: b.branch?.name || "Ch∆∞a c√≥ chi nh√°nh",
      profileDescription: b.profileDescription || "Kh√¥ng c√≥ m√¥ t·∫£",
      avgRate: b.ratingSummary?.avgRate || 0,
      displayText: `T√™n barber: ${b.user?.fullName || "Ch∆∞a c√≥ t√™n"}, Chi nh√°nh: ${b.branch?.name || "Ch∆∞a c√≥ chi nh√°nh"}, M√¥ t·∫£: ${b.profileDescription || "Kh√¥ng c√≥ m√¥ t·∫£"}, ƒê√°nh gi√° trung b√¨nh: ${b.ratingSummary?.avgRate || 0}`,
    }));


    await upsertBarbers(barberData);

    return { message: "Barber data synced to Pinecone (test).", total: barberData.length };
  } catch (error) {

    return { message: " L·ªói server", error: error.message };
  }
};

export const assignUserAsBarber = async (data) => {
  const t = await db.sequelize.transaction();
  try {
    const { idUser, idBranch, profileDescription } = data;

    // 1Ô∏è‚É£ Ki·ªÉm tra user t·ªìn t·∫°i
    const user = await db.User.findByPk(idUser);
    if (!user) {
      throw new Error("Kh√¥ng t√¨m th·∫•y user");
    }

    // 2Ô∏è‚É£ C·∫≠p nh·∫≠t role = 'barber' (n·∫øu ch∆∞a ph·∫£i barber)
    if (user.role !== "barber") {
      user.role = "barber";
      await user.save({ transaction: t });
    }

    // 3Ô∏è‚É£ Ki·ªÉm tra xem ƒë√£ c√≥ record trong b·∫£ng barbers ch∆∞a
    let barber = await db.Barber.findByPk(idUser);

    if (!barber) {
      // üîπ N·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi
      barber = await db.Barber.create(
        {
          idBarber: idUser,
          idBranch: idBranch || null,
          profileDescription: profileDescription || "Ch∆∞a c√≥ m√¥ t·∫£",
          isLocked: false,
        },
        { transaction: t }
      );
    } else {
      // üîπ N·∫øu c√≥ r·ªìi th√¨ c·∫≠p nh·∫≠t
      barber.idBranch = idBranch ?? barber.idBranch;
      barber.profileDescription = profileDescription ?? barber.profileDescription;
      await barber.save({ transaction: t });
    }

    await t.commit();

    return {
      message: "Ph√¢n c√¥ng user th√†nh barber th√†nh c√¥ng",
      user,
      barber,
    };
  } catch (error) {
    await t.rollback();
    throw new Error("L·ªói khi ph√¢n c√¥ng user th√†nh barber: " + error.message);
  }
};

export const assignBarberToBranch = async (idBarber, idBranch) => {
  const barber = await Barber.findByPk(idBarber);
  if (!barber) throw new Error("Khong t√¨m th·∫•y barber");
  barber.idBranch = idBranch;
  await barber.save();
  return barber;
};

export const approveBarber = async (idBarber) => {
  const barber = await Barber.findByPk(idBarber);
  if (!barber) throw new Error("Khong t√¨m th·∫•y barber");
  barber.isApproved = true;
  await barber.save();
  return barber;
};

export const lockBarber = async (idBarber) => {
  const barber = await Barber.findByPk(idBarber);
  if (!barber) throw new Error("Khong t√¨m th·∫•y barber");
  barber.isLocked = true;
  await barber.save();
  return barber;
};

export const unlockBarber = async (idBarber) => {
  const barber = await Barber.findByPk(idBarber);
  if (!barber) throw new Error("Khong t√¨m th·∫•y barber");
  barber.isLocked = false;
  await barber.save();
  return barber;
};
